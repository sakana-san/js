.slide {
  width: 600px;
  height: 200px;
  overflow: hidden;
}

.slide:after {
  content: "";
  display: block;
  clear: both;
}

.slide-list {
  position: relative;
  width: 100%;
  height: 200px;
}

.slide-list > .slide-list__image {
  position: absolute;
  top: 0;
  left: 0;
}

/*
.slidePattern2 {
	width: 600px;
	height: 200px;
	overflow: hidden;
}
.slidePattern2:after {
	content: "";
	display: block;
	clear: both;
}
.slidePattern2-list {
	position: relative;
	width: 100%;
	height: 200px;
}
.slidePattern2-list > .slidePattern2-list__image {
	position: absolute;
	top: 0;
	left: 0;
}
*/
.thumbnailsSlide {
  margin: 10px auto;
  text-align: center;
}

.thumbnailList {
  width: 125px;
  height: 83px;
  opacity: 0.5;
  cursor: pointer;
}
.thumbnailList + .thumbnailList {
  margin-left: 4px;
}

.current {
  opacity: 1.0;
}

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
